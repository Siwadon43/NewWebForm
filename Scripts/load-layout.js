async function loadHeader() {
  const res = await fetch("components/header.html");
  const text = await res.text();
  document.getElementById("pnlTitle").innerHTML = text;

  // ‡∏£‡∏≠‡πÉ‡∏´‡πâ DOM ‡∏Ç‡∏≠‡∏á header ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ set ‡∏Ñ‡πà‡∏≤
  const programName = window.AppConfig?.programName ?? "";
  const programID = window.AppConfig?.programID ?? "";

  // ‡πÅ‡∏Å‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á header ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤
  document.querySelector("#lblPrgName").textContent = programName;
  document.querySelector("#lblPrgID").textContent = programID;
}

async function loadGridList() {
  const res = await fetch("components/gridlist.html");
  const text = await res.text();
  document.getElementById("divGrid").innerHTML = text;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ
 * @param {string} containerId - id ‡∏Ç‡∏≠‡∏á container ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ù‡∏±‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡∏á‡πÑ‡∏õ
 * @param {Array} headers - array ‡∏Ç‡∏≠‡∏á object ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡πÄ‡∏ä‡πà‡∏ô {title, width, align}
 * @param {Array} data - array ‡∏Ç‡∏≠‡∏á array ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
 * @param {Array} actionButtons - array ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ["open", "delete"]
 */


function createTable(
  containerId,
  headers,
  data,
  actionButtons = [],
  vheight = heightDisplay()
) {

  const borderStyleTable = "1px solid #bbb";
  const wrapper = document.createElement("div");
  wrapper.style.height = vheight;
  wrapper.style.overflowY = "auto";
  wrapper.style.border = borderStyleTable;

  const table = document.createElement("table");
  table.style.width = "100%";
  table.style.borderCollapse = "separate";
  table.style.borderSpacing = "0";
  table.style.tableLayout = "fixed";

  const thead = document.createElement("thead");
  thead.style.height = "30px"
  const headRow = document.createElement("tr");

  const newHeaders =
    actionButtons.length > 0
      ? [...headers, { title: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£", width: "10%", align: "center" }]
      : [...headers];

  newHeaders.forEach((col, colIndex) => {
    const th = document.createElement("th");
    th.style.width = col.width;
    th.style.border = borderStyleTable;
    th.style.textAlign = "center";
    th.style.position = "sticky";
    th.style.top = "0";
    th.style.backgroundColor = "#FED9B7";
    th.style.zIndex = "10";
    th.style.height = "35px";          // ‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    th.style.lineHeight = "35px";
    th.style.fontSize = "14px";
    th.style.padding = "0 4px";
    th.style.wordWrap = "break-word";
    th.style.whiteSpace = "normal";
    if (col.title === "[]") {
      const checkbox = document.createElement("input");
      checkbox.type = "checkbox";
      checkbox.style.transform = "scale(1.2)";
      checkbox.style.cursor = "pointer";

      // ‚úÖ ‡∏£‡∏∞‡∏ö‡∏∏ index ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà checkbox ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà
      checkbox.dataset.colIndex = colIndex;

      // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ/‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å checkbox ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
      checkbox.addEventListener("change", (e) => {
        const colIndex = parseInt(e.target.dataset.colIndex);
        const allRows = table.querySelectorAll("tbody tr");

        allRows.forEach((row) => {
          const cell = row.children[colIndex];
          if (cell) {
            const cb = cell.querySelector('input[type="checkbox"]');
            if (cb) cb.checked = e.target.checked;
          }
        });
      });

      th.appendChild(checkbox);
    } else {
      th.textContent = col.title;
    }

    headRow.appendChild(th);
  });



  thead.appendChild(headRow);
  table.appendChild(thead);

  const tbody = document.createElement("tbody");

  data.forEach((row, rowIndex) => {
    const tr = document.createElement("tr");
    tr.style.height = "32px";
    tr.style.backgroundColor = rowIndex % 2 === 0 ? "#ffffff" : "#f0f0f0";
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° effect hover ‡∏î‡πâ‡∏ß‡∏¢ JavaScript
    tr.addEventListener("mouseover", () => {
      tr.style.backgroundColor = "rgb(253,203,10)"; // ‡∏™‡∏µ‡∏ï‡∏≠‡∏ô hover
    });

    tr.addEventListener("mouseout", () => {
      tr.style.backgroundColor = rowIndex % 2 === 0 ? "#ffffff" : "#f5f5f5ff"; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÄ‡∏î‡∏¥‡∏°
    });

    row.forEach((cell, i) => {
      const td = document.createElement("td");
      const align = headers[i].align || "left";
      const rightType = headers[i].right ?? "";

      td.style.textAlign = align;
      td.style.border = borderStyleTable;
      td.style.padding = "0px 4px";
      td.style.fontSize = "12px";
      td.style.height = "28px";          // ‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      td.style.lineHeight = "28px";
      td.style.padding = "0 4px";
      td.style.wordWrap = "break-word";
      td.style.whiteSpace = "normal"; // ‡∏ï‡∏±‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÑ‡∏î‡πâ
      let element;

      if (rightType === "E") {
        const input = document.createElement("input");
        input.type = "text";
        input.value = cell;
        input.disabled = false;
        input.style.width = "100%";
        input.style.height = "25px";
        input.style.padding = "2px 6px";
        input.style.border = "none";
        input.style.backgroundColor = "transparent";
        input.style.borderRadius = "4px";
        input.style.fontSize = "14px";
        input.style.textAlign = align;
        element = input;

      } else if (rightType === "C") {
        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.checked = cell === true || cell === "true" || cell === 1;
        checkbox.disabled = false;
        checkbox.style.transform = "scale(1)";
        checkbox.style.cursor = "pointer";
        checkbox.dataset.colIndex = i; // üü° ‡πÉ‡∏™‡πà index ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        element = checkbox;
      } else {
        const label = document.createElement("label");
        label.textContent = cell;
        label.style.display = "block";
        label.style.padding = "1px 6px";
        label.style.fontSize = "12px";
        label.style.height = "25px";
        label.style.lineHeight = "25px";
        label.style.textAlign = align;
        label.style.wordWrap = "break-word";     // ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏≠‡∏ö
        label.style.whiteSpace = "normal";       // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
        label.style.height = "auto"; // ‚úÖ ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        element = label;
      }
      td.style.verticalAlign = "top";            // ‚úÖ ‡πÉ‡∏´‡πâ td ‡∏ä‡∏¥‡∏î‡∏ö‡∏ô
      td.style.height = "auto";
      td.appendChild(element);
      tr.appendChild(td);
    });

    if (actionButtons.length > 0) {
      const tdActions = document.createElement("td");
      tdActions.style.textAlign = "center";
      tdActions.style.border = borderStyleTable;

      const btnWrapper = document.createElement("div");
      btnWrapper.style.display = "flex";
      btnWrapper.style.justifyContent = "center";
      btnWrapper.style.alignItems = "center";
      btnWrapper.style.gap = "10px";

      actionButtons.forEach((btnType) => {
        const img = document.createElement("img");
        img.style.width = "20px";
        img.style.height = "20px";
        img.style.cursor = "pointer";

        if (btnType === "edit") {
          img.src = "images/edit3.png";
          img.alt = "Edit";
          img.title = "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç";
          img.classList.add("icon-edit");
        }

        if (btnType === "delete") {
          img.src = "images/delete3.png";
          img.alt = "Delete";
          img.title = "‡∏•‡∏ö";
          img.classList.add("icon-delete");

          img.onclick = () => {
            if (confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${rowIndex + 1} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
              tr.remove();
            }
          };
        }

        btnWrapper.appendChild(img);
      });

      tdActions.appendChild(btnWrapper);
      tr.appendChild(tdActions);
    }

    tbody.appendChild(tr);
  });

  table.appendChild(tbody);
  wrapper.appendChild(table);

  const container = document.getElementById(containerId);
  if (container) {
    container.appendChild(wrapper);
  } else {
    console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö container:", containerId);
  }
}


function heightDisplay() {
  const pnlTitle = document.getElementById('pnlTitle')
  const pnlDocno = document.getElementById('pnlDocno')
  const divSearch = document.getElementById('divSearch')


  const heightTitle = pnlTitle.getBoundingClientRect().height
  const heightDocno = pnlDocno.getBoundingClientRect().height
  const heightSearch = divSearch.getBoundingClientRect().height
  const heightViewport = window.innerHeight
  let heightGrid = 0;
  console.log("pnlTitle", heightTitle); // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ö‡∏ô‡∏à‡∏≠‡∏à‡∏£‡∏¥‡∏á
  console.log("pnlDocno", heightDocno); // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ö‡∏ô‡∏à‡∏≠‡∏à‡∏£‡∏¥‡∏á
  console.log("divSearch", heightSearch); // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ö‡∏ô‡∏à‡∏≠‡∏à‡∏£‡∏¥‡∏á
  console.log("Viewport ", heightViewport);
  heightGrid = heightViewport - (heightDocno + heightSearch + heightTitle + heightTitle)
  console.log('Grid', heightGrid);
  return heightGrid + 'px'
}

loadHeader();
